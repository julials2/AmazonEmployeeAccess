
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.2     ✔ tibble    3.3.0
✔ lubridate 1.9.4     ✔ tidyr     1.3.1
✔ purrr     1.1.0     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.4.1 ──
✔ broom        1.0.10     ✔ rsample      1.3.1 
✔ dials        1.4.2      ✔ tailor       0.1.0 
✔ infer        1.0.9      ✔ tune         2.0.0 
✔ modeldata    1.5.1      ✔ workflows    1.3.0 
✔ parsnip      1.3.3      ✔ workflowsets 1.1.1 
✔ recipes      1.3.1      ✔ yardstick    1.3.2 
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
> library(embed)
> library(ggmosaic)
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> 
> amazon_train <- vroom("train.csv") %>% 
+   mutate(ACTION = factor(ACTION))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> amazon_test <- vroom("test.csv") 
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> #####
> ### EDA
> #####
> amazon_train %>% 
+   mutate(ROLE_FAMILY = factor(ROLE_FAMILY)) %>% 
+   group_by(ROLE_FAMILY) %>% 
+   summarize(n = n()) %>% 
+   arrange(desc(n)) %>% 
+   head(n = 10) %>% 
+ ggplot() +
+   geom_col(aes(x = ROLE_FAMILY, y = n)) +
+   theme(axis.text.x = element_text(angle = 90, hjust = 1))
> 
> amazon_train %>% 
+   mutate(ROLE_DEPTNAME = factor(ROLE_DEPTNAME)) %>% 
+   group_by(ROLE_DEPTNAME) %>% 
+   summarize(n = n()) %>% 
+   arrange(desc(n)) %>% 
+   head(n = 10) %>% 
+ ggplot() +
+   geom_col(aes(x = ROLE_DEPTNAME, y = n)) +
+   theme(axis.text.x = element_text(angle = 90, hjust = 1))
> 
> #####
> ### Recipe
> ##### 
> amazon_recipe <- recipe(ACTION ~., data=amazon_train) %>% 
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
+   step_other(all_factor_predictors(), threshold = .001) %>% 
+   step_lencode_mixed(all_factor_predictors(), outcome = vars(ACTION)) %>% 
+   step_normalize(all_factor_predictors())
> 
> prep <- prep(amazon_recipe)
> baked <- bake(prep, new_data = amazon_train)
> 
> #####
> ## Model and predictions
> ##### 
> # logistic regression model
> logRegModel <- logistic_reg() %>% #Type of model
+   set_engine("glm")
> 
> # penalized regression model
> penLogModel <- logistic_reg(mixture = tune(), penalty = tune()) %>% 
+   set_engine("glmnet")
> 
> ## Put into a workflow here
> 
> ## logistic regression
> # log_reg_workflow <- workflow() %>% 
> #   add_recipe(amazon_recipe) %>% 
> #   add_model(logRegModel) %>% 
> #   fit(data = amazon_train)
> 
> ## penalized logistic regression
> amazon_workflow <- workflow() %>% 
+   add_recipe(amazon_recipe) %>% 
+   add_model(penLogModel)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(penalty(), 
+                             mixture(), 
+                             levels = 4)
> 
> ## Split data for CV
> folds <- vfold_cv(amazon_train, v = 5, repeats = 1)
> 
> ## Run CV
> CV_results <- amazon_workflow %>% 
+   tune_grid(resamples = folds, 
+             grid = tuning_grid, 
+             metrics = metric_set(roc_auc))
> 
> ## Find best tuning parameters
> bestTune <- CV_results %>% 
+   select_best(metric="roc_auc")
> 
> ## Finalize workflow and fit it
> final_wf <- amazon_workflow %>% 
+   finalize_workflow(bestTune) %>% 
+   fit(data = amazon_train)
> 
> ## Make predictions
> amazon_predictions <- predict(final_wf,
+                               new_data=amazon_test,
+                               type="prob") # "class" or "prob"
> 
> ## Format predictions
> kaggle_predictions <- amazon_predictions %>% 
+   bind_cols(., amazon_test) %>% 
+   select(id, .pred_1) %>% 
+   rename(ACTION = .pred_1, 
+          Id = id)
>   
> vroom_write(x = kaggle_predictions, file = "./penLogPredictions.csv", delim = ",")
>   
> 
> proc.time()
   user  system elapsed 
304.437   2.167 159.022 
